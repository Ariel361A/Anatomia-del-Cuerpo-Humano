#ifndef FILESYSTEM_H

#define FILESYSTEM_H

#include <string>
#include <cstdlib>
#include <memory>
#include "root_directory.h" // This is a configuration file generated by CMake.

class FileSystem
{
private:
    typedef std::string(*Builder) (const std::string& path);

public:
    static std::string getPath(const std::string& path)
    {
        static std::string(*pathBuilder)(std::string const&) = getPathBuilder();
        return (*pathBuilder)(path);
    }

private:
    static std::string const& getRoot()
    {
        static std::string root = []() {
            char* envRoot = nullptr;
            size_t len = 0;

            // Usar _dupenv_s en lugar de getenv
            if (_dupenv_s(&envRoot, &len, "LOGL_ROOT_PATH") == 0 && envRoot != nullptr)
            {
                std::string result(envRoot);
                free(envRoot); // Liberar la memoria asignada por _dupenv_s
                return result;
            }
            return std::string(logl_root != nullptr ? logl_root : "");
            }();

        return root;
    }

    static std::string getPathRelativeRoot(const std::string& path)
    {
        return getRoot() + std::string("/") + path;
    }

    static std::string getPathRelativeBinary(const std::string& path)
    {
        return "../../../" + path;
    }

    static Builder getPathBuilder()
    {
        if (getRoot() != "")
            return &FileSystem::getPathRelativeRoot;
        else
            return &FileSystem::getPathRelativeBinary;
    }


};

#endif // FILESYSTEM_H